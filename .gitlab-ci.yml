# GitLab CI/CD Pipeline for Guardrail Service Documentation
# Supports both local component testing and GitLab Pages deployment

stages:
  - validate
  - build
  - test
  - deploy

variables:
  NODE_VERSION: "20"
  ANTORA_CACHE_DIR: ".cache/antora"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/
    - .cache/

# Install dependencies template
.install_deps:
  before_script:
    - apt-get update -qq && apt-get install -y -qq git
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline

# Validate documentation structure
validate:structure:
  stage: validate
  image: node:${NODE_VERSION}
  extends: .install_deps
  script:
    - echo "Validating Antora structure..."
    - npx antora --version
    - npx antora --fetch --generator @antora/xref-validator local-antora-playbook.yml
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 week
  only:
    - branches
    - merge_requests

# Validate AsciiDoc syntax
validate:asciidoc:
  stage: validate
  image: asciidoctor/docker-asciidoctor:latest
  script:
    - echo "Validating AsciiDoc files..."
    - find modules -name "*.adoc" -exec asciidoctor --safe-mode=safe --failure-level=WARNING -o /dev/null {} \;
  only:
    - branches
    - merge_requests

# Build documentation for testing
build:local:
  stage: build
  image: node:${NODE_VERSION}
  extends: .install_deps
  script:
    - echo "Building documentation locally..."
    - npx antora --fetch local-antora-playbook.yml
    - echo "Build completed successfully"
  artifacts:
    paths:
      - build/
    expire_in: 1 week
  except:
    - main
    - tags

# Build documentation for production
build:production:
  stage: build
  image: node:${NODE_VERSION}
  extends: .install_deps
  script:
    - echo "Building documentation for production..."
    - npx antora --fetch antora-playbook.yml
    - echo "Production build completed successfully"
  artifacts:
    paths:
      - public/
    expire_in: 1 week
  only:
    - main
    - tags

# Test broken links
test:links:
  stage: test
  image: node:${NODE_VERSION}
  dependencies:
    - build:local
  script:
    - npm install -g broken-link-checker
    - echo "Starting local server..."
    - npx http-server build -p 8080 &
    - sleep 5
    - echo "Checking for broken links..."
    - blc http://localhost:8080 --recursive --exclude-external || true
  artifacts:
    reports:
      junit: link-check-results.xml
    expire_in: 1 week
  except:
    - main
    - tags

# Test search functionality
test:search:
  stage: test
  image: node:${NODE_VERSION}
  dependencies:
    - build:local
  script:
    - echo "Testing search index generation..."
    - test -f build/search-index.json && echo "Search index exists" || echo "Warning: No search index found"
  except:
    - main
    - tags

# Deploy to GitLab Pages
pages:
  stage: deploy
  image: node:${NODE_VERSION}
  dependencies:
    - build:production
  script:
    - echo "Deploying to GitLab Pages..."
    # The public folder is already created by build:production
    - echo "Deployment artifacts ready"
  artifacts:
    paths:
      - public
  only:
    - main

# Deploy preview for merge requests
deploy:preview:
  stage: deploy
  image: node:${NODE_VERSION}
  dependencies:
    - build:local
  script:
    - echo "Creating preview deployment..."
    - mkdir -p public
    - cp -r build/* public/
    - echo "Preview available at: ${CI_ENVIRONMENT_URL}"
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: https://$CI_PROJECT_PATH_SLUG-$CI_MERGE_REQUEST_IID.gitlab.io
    on_stop: stop:preview
    auto_stop_in: 1 week
  artifacts:
    paths:
      - public
    expire_in: 1 week
  only:
    - merge_requests

# Stop preview deployment
stop:preview:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Stopping preview deployment..."
  when: manual
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  only:
    - merge_requests

# Create release
release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release ${CI_COMMIT_TAG}"
  release:
    tag_name: $CI_COMMIT_TAG
    description: |
      ## Guardrail Service Documentation ${CI_COMMIT_TAG}
      
      Documentation release for version ${CI_COMMIT_TAG}
      
      ### Changes
      See [CHANGELOG.md](CHANGELOG.md) for details.
      
      ### Documentation
      View the documentation at: https://${CI_PROJECT_PATH_SLUG}.gitlab.io
  only:
    - tags

# Security scanning for dependencies
security:dependencies:
  stage: test
  image: node:${NODE_VERSION}
  extends: .install_deps
  script:
    - npm audit --audit-level=moderate
  allow_failure: true
  only:
    - main
    - merge_requests

# Generate documentation metrics
metrics:
  stage: test
  image: node:${NODE_VERSION}
  dependencies:
    - build:local
  script:
    - echo "Generating documentation metrics..."
    - |
      echo "Page count: $(find build -name "*.html" | wc -l)"
      echo "Module count: $(ls -d modules/*/ | wc -l)"
      echo "Total size: $(du -sh build | cut -f1)"
  artifacts:
    reports:
      metrics: metrics.txt
    expire_in: 1 week
  only:
    - main
    - merge_requests